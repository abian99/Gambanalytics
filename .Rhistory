rmarkdown::clean_site(preview = FALSE)
getwd()
rmarkdown::clean_site(preview=FALSE)
current_date <- Sys.Date()
date_limit <- current_date + 7
upcoming_games <- current_season_schedule %>%
filter((gameday > current_date)&(gameday < date_limit))
current_date <- Sys.Date()
date_limit <- current_date + 7
upcoming_games <- current_season_schedule %>%
filter((gameday > current_date)&(gameday < date_limit))
library(nflfastR)
library(dplyr, warn.conflicts = FALSE)
library(tidyverse)
library(nflplotR)
source("buildFunctions.R")
current_season = 2022
knitr::opts_chunk$set(echo = TRUE)
nflreadr::.clear_cache()
options(dplyr.summarise.inform = FALSE)
current_season_schedule <- fast_scraper_schedules(current_season)
offense_pbp <- load_pbp(current_season) %>%
filter(season_type == "REG") %>%
filter(!is.na(posteam) & (rush == 1 | pass == 1))
scores <-
offense_pbp[c(
'game_id',
'week',
'home_team',
'away_team',
'season_type',
'home_score',
'away_score'
)] %>%
unique()
home_df <-
scores[c('week', 'home_team', 'away_team', 'home_score', 'away_score')] %>%
rename(team = home_team) %>%
group_by(team) %>%
mutate(
oppositionTeam = away_team,
PointsFor = mean(home_score),
PointsAgainst = mean(away_score),
win = if_else(home_score > away_score, 1, 0),
pythWin = (PointsFor^13.91)/((PointsFor^13.91)+(PointsAgainst^13.91))
) %>%
summarise(week,
team,
oppositionTeam,
PointsFor,
PointsAgainst,
win,
pythWin
) %>%
unique()
away_df <-
scores[c('week', 'away_team', 'home_team', 'home_score', 'away_score')] %>%
rename(team = away_team) %>%
group_by(team) %>%
mutate(
oppositionTeam = home_team,
PointsFor = away_score,
PointsAgainst = home_score,
win = if_else(away_score > home_score, 1, 0),
pythWin = (PointsFor^13.91)/((PointsFor^13.91)+(PointsAgainst^13.91))
) %>%
summarize(week,
team,
oppositionTeam,
PointsFor,
PointsAgainst,
win,
pythWin
) %>%
unique()
schedule_df <- rbind(x = away_df, y = home_df)
avg_points = mean(schedule_df$PointsFor)
team_df <- schedule_df %>%
group_by(team) %>%
mutate(
oRatio = mean(PointsFor / avg_points),
dRatio = mean(PointsAgainst / avg_points),
pointsFor = mean(PointsFor),
pointsAgainst = mean(PointsAgainst),
netPF = mean(PointsFor / dRatio),
netPA = mean(PointsAgainst / oRatio),
wins = sum(win),
losses = sum(win == 0),
winPct = wins / (wins + losses),
pythWin = ((pointsFor^2.37)/((pointsFor^2.37)+(pointsAgainst^2.37)))*17
) %>%
summarize(team,
pointsFor,
pointsAgainst,
netPF,
netPA,
wins,
pythWin,
losses,
winPct,
oRatio,
dRatio) %>%
unique()
ggplot(team_df, aes(x = pointsFor, y = pointsAgainst)) +
geom_mean_lines(aes(h_var = pointsFor, v_var = pointsAgainst)) +
geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) +
labs(x = "PointsFor/Game",
y = "PointsAgainst/Game",
title = "2021-2022 NFL Average Points For vs Points Against") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold")) +
scale_y_reverse()
ggplot(team_df, aes(x = pointsFor, y = netPF)) +
geom_mean_lines(aes(h_var = pointsFor, v_var = netPF)) +
geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) +
labs(x = "Actual Points For",
y = "Weighted Points For",
title = "2022-2023 NFL Points For vs Weighted Points For Based On Opponent") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold"))
ggplot(team_df, aes(x = pointsAgainst, y = netPA)) +
geom_mean_lines(aes(h_var = pointsAgainst, v_var = netPA)) +
geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) +
labs(x = "Actual Points Against",
y = "Weighted Points Against",
title = "2022-2023 NFL Points Against vs Weighted Points Against Based On Opponent") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold"))+
scale_y_reverse()+
scale_x_reverse()
current_date <- Sys.Date()
date_limit <- current_date + 7
upcoming_games <- current_season_schedule %>%
filter((gameday > current_date)&(gameday < date_limit))
predictor_DF <- upcoming_games %>%
inner_join(
team_df, by = c('home_team' = 'team')
) %>%
inner_join(
team_df, by = c('away_team' = 'team')
) %>%
mutate(
homeAvg = pointsFor.x,
homeAvgRatio = pointsFor.x*dRatio.y,
homeNetRatio = netPF.x * dRatio.y,
awayAvg = pointsFor.y,
awayAvgRatio = pointsFor.y * dRatio.x,
awayNetRatio = netPF.y * dRatio.x,
avgWinner = if_else(homeAvg > awayAvg, home_team, if_else(awayAvg > homeAvg, away_team, "TIE")),
avgRatioWinner = if_else(homeAvgRatio > awayAvgRatio, home_team, if_else(awayAvgRatio > homeAvgRatio, away_team, "TIE")),
netRatioWinner = if_else(homeNetRatio > awayNetRatio, home_team, if_else(awayNetRatio > homeNetRatio, away_team, "TIE")),
actualWinner = if_else(home_score > away_score, home_team, if_else(away_score > home_score, away_team, "TIE"))
) %>%
summarize(
game_id,
home_team,
away_team,
homeAvg,
homeAvgRatio,
homeNetRatio,
home_score,
awayAvg,
awayAvgRatio,
awayNetRatio,
away_score,
avgWinner,
avgRatioWinner,
netRatioWinner,
actualWinner
)
predictor_DF[c(
'game_id',
'home_team',
'away_team',
'homeAvg',
'awayAvg',
'avgWinner'
)]
predictor_DF[c(
'game_id',
'home_team',
'away_team',
'homeAvgRatio',
'awayAvgRatio',
'avgRatioWinner'
)]
predictor_DF[c(
'game_id',
'home_team',
'away_team',
'homeNetRatio',
'awayNetRatio',
'netRatioWinner'
)]
Testing
library(nflfastR)
library(dplyr, warn.conflicts = FALSE)
library(tidyverse)
library(nflplotR)
source("buildFunctions.R")
knitr::opts_chunk$set(echo = TRUE)
nflreadr::.clear_cache()
pbp <- load_pbp(2022) %>%
filter(season_type == "REG") %>%
filter(!is.na(posteam) & (rush == 1 | pass == 1))
scores <-
pbp[c(
'game_id',
'week',
'home_team',
'away_team',
'season_type',
'home_score',
'away_score'
)] %>%
unique()
home_df <-
scores[c('week', 'home_team', 'away_team', 'home_score', 'away_score')] %>%
rename(team = home_team) %>%
group_by(team) %>%
mutate(
oppositionTeam = away_team,
PointsFor = mean(home_score),
PointsAgainst = mean(away_score),
win = if_else(home_score > away_score, 1, 0),
pythWin = (PointsFor^13.91)/((PointsFor^13.91)+(PointsAgainst^13.91))
) %>%
summarise(week,
team,
oppositionTeam,
PointsFor,
PointsAgainst,
win,
pythWin
) %>%
unique()
away_df <-
scores[c('week', 'away_team', 'home_team', 'home_score', 'away_score')] %>%
rename(team = away_team) %>%
group_by(team) %>%
mutate(
oppositionTeam = home_team,
PointsFor = away_score,
PointsAgainst = home_score,
win = if_else(away_score > home_score, 1, 0),
pythWin = (PointsFor^13.91)/((PointsFor^13.91)+(PointsAgainst^13.91))
) %>%
summarize(week,
team,
oppositionTeam,
PointsFor,
PointsAgainst,
win,
pythWin
) %>%
unique()
schedule_df <- rbind(x = away_df, y = home_df)
avg_points = mean(schedule_df$PointsFor)
team_df <- schedule_df %>%
group_by(team) %>%
mutate(
oRatio = mean(PointsFor / avg_points),
dRatio = mean(PointsAgainst / avg_points),
pointsFor = mean(PointsFor),
pointsAgainst = mean(PointsAgainst),
netPF = mean(PointsFor / dRatio),
netPA = mean(PointsAgainst / oRatio),
wins = sum(win),
losses = sum(win == 0),
winPct = wins / (wins + losses),
pythWin = ((pointsFor^2.37)/((pointsFor^2.37)+(pointsAgainst^2.37)))*17
) %>%
summarize(team,
pointsFor,
pointsAgainst,
netPF,
netPA,
wins,
pythWin,
losses,
winPct,
oRatio,
dRatio) %>%
unique()
ggplot(team_df, aes(x = pointsFor, y = pointsAgainst)) +
geom_mean_lines(aes(h_var = pointsFor, v_var = pointsAgainst)) +
geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) +
labs(x = "PointsFor/Game",
y = "PointsAgainst/Game",
title = "2021-2022 NFL Average Points For vs Points Against") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold")) +
scale_y_reverse()
below500 <- team_df %>%
filter(winPct < .501)
above500 <- team_df %>%
filter(winPct > .500)
above500_df <- schedule_df %>%
filter(oppositionTeam %in% above500$team) %>%
group_by(team) %>%
mutate(
pointsFor = mean(PointsFor),
pointsAgainst = mean(PointsAgainst),
wins = sum(win),
losses = sum(win == 0),
winPct_above = wins / (wins + losses)
) %>%
summarize(team,
winPct_above) %>%
unique()
below500_df <- schedule_df %>%
filter(oppositionTeam %in% below500$team) %>%
group_by(team) %>%
mutate(
pointsFor = mean(PointsFor),
pointsAgainst = mean(PointsAgainst),
wins = sum(win),
losses = sum(win == 0),
winPct_below = wins / (wins + losses)
) %>%
summarize(team,
winPct_below) %>%
unique()
winPct500 <- merge(above500_df, below500_df, by = "team")
ggplot(winPct500, aes(x = winPct_below, y = winPct_above)) +
geom_mean_lines(aes(h_var = winPct_below, v_var = winPct_above)) +
geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) +
labs(x = "Win% vs Teams Below .500",
y = "Win% vs Teams Above .500",
title = "2022-2023 NFL Win% vs teams above .500 and below") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold"))
ggplot(team_df, aes(x = wins, y = pythWin)) +
geom_mean_lines(aes(h_var = wins, v_var = pythWin)) +
geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) +
labs(x = "# Of Wins",
y = "# Of Pythagorean Expected Wins",
title = "2022-2023 Wins vs Pythagorean Expected Wins") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold"))
ggplot(team_df, aes(x = pointsFor, y = netPF)) +
geom_mean_lines(aes(h_var = pointsFor, v_var = netPF)) +
geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) +
labs(x = "Actual Points For",
y = "Weighted Points For",
title = "2022-2023 NFL Points For vs Weighted Points For Based On Opponent") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold"))
ggplot(team_df, aes(x = pointsAgainst, y = netPA)) +
geom_mean_lines(aes(h_var = pointsAgainst, v_var = netPA)) +
geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) +
labs(x = "Actual Points Against",
y = "Weighted Points Against",
title = "2022-2023 NFL Points Against vs Weighted Points Against Based On Opponent") +
theme_bw() +
theme(plot.title = element_text(size = 12, hjust = 0.5, face = "bold"))+
scale_y_reverse()+
scale_x_reverse()
current_schedule <- fast_scraper_schedules(2022) %>%
filter(week == 14)
predictor_DF <- current_schedule %>%
inner_join(
team_df, by = c('home_team' = 'team')
) %>%
inner_join(
team_df, by = c('away_team' = 'team')
) %>%
mutate(
homeAvg = pointsFor.x,
homeavgRatio = pointsFor.x*dRatio.y,
homeNetRatio = netPF.x * dRatio.y,
awayAvg = pointsFor.y,
awayAvgRatio = pointsFor.y * dRatio.x,
awayNetRatio = netPF.y * dRatio.x,
avgWinner = if_else(homeAvg > awayAvg, home_team, if_else(awayAvg > homeAvg, away_team, "TIE")),
avgRatioWinner = if_else(homeavgRatio > awayAvgRatio, home_team, if_else(awayAvgRatio > homeavgRatio, away_team, "TIE")),
netRatioWinner = if_else(homeNetRatio > awayNetRatio, home_team, if_else(awayNetRatio > homeNetRatio, away_team, "TIE")),
actualWinner = if_else(home_score > away_score, home_team, if_else(away_score > home_score, away_team, "TIE"))
) %>%
summarize(
game_id,
home_team,
away_team,
homeAvg,
homeavgRatio,
homeNetRatio,
home_score,
awayAvg,
awayAvgRatio,
awayNetRatio,
away_score,
avgWinner,
avgRatioWinner,
netRatioWinner,
actualWinner
)
pred <- predictor_DF %>%
gather(key = "method", value = "score", homeAvg:home_score) %>%
group_by(game_id) %>%
mutate(relative = score - score[method == "home_score"])
current_week = 14
current_season_schedule <- fast_scraper_schedules(2022)
current_week_counter = 5
temp_team_schedule <- schedule_df %>%
filter(week < 5)
temp_league_schedule <- current_season_schedule %>%
filter(week == 5)
temp_team_df <- return_team_df(temp_team_schedule)
baseline_predictor_df <- return_predictor_df(temp_league_schedule, temp_team_df, avg_points)
while (current_week_counter < current_week) {
temp_team_schedule2 <- schedule_df %>%
filter(week < current_week_counter)
temp_league_schedule <- current_season_schedule %>%
filter(week == current_week_counter)
temp_team_df <- return_team_df(temp_team_schedule2)
baseline_predictor_df <- rbind(baseline_predictor_df, return_predictor_df(temp_league_schedule, temp_team_df, avg_points))
current_week_counter = current_week_counter + 1
}
prediction_results <- baseline_predictor_df[c('avgWinner', 'avgRatioWinner', 'netRatioWinner', 'avgRatioWinner2', 'netRatioWinner2', 'jucculaWinner', 'actualWinner')] %>%
mutate(
avgWinnerPct = sum(avgWinner == actualWinner)/n(),
avgRatioWinnerPct = sum(avgRatioWinner == actualWinner)/n(),
netRatioWinnerPct = sum(netRatioWinner == actualWinner)/n(),
avgRatioWinnerPct2 = sum(avgRatioWinner2 == actualWinner)/n(),
netRatioWinnerPct2 = sum(netRatioWinner2 == actualWinner)/n(),
jucculaWinPct = sum(netRatioWinner2 == actualWinner)/n(),
everyoneWinPct = sum((netRatioWinner2 == avgRatioWinner2) & (netRatioWinner2 == netRatioWinner) & (netRatioWinner2 == avgRatioWinner) & (netRatioWinner2 == avgWinner) & (netRatioWinner2 == actualWinner))/ sum((netRatioWinner2 == avgRatioWinner2) & (netRatioWinner2 == netRatioWinner) & (netRatioWinner2 == avgRatioWinner) & (netRatioWinner2 == avgWinner)),
totalAgree = sum((netRatioWinner2 == avgRatioWinner2) & (netRatioWinner2 == netRatioWinner) & (netRatioWinner2 == avgRatioWinner) & (netRatioWinner2 == avgWinner) & (netRatioWinner2 == actualWinner)),
total = n()
) %>%
summarize(
avgWinnerPct,
avgRatioWinnerPct,
netRatioWinnerPct,
avgRatioWinnerPct2,
netRatioWinnerPct2,
jucculaWinPct,
everyoneWinPct,
totalAgree,
total
) %>%
unique()
moneyLineOdds <- current_season_schedule %>%
summarize(
game_id,
home_moneyline,
away_moneyline
)
agreedGames <- baseline_predictor_df %>%
filter((netRatioWinner2 == avgRatioWinner2) & (netRatioWinner2 == netRatioWinner) & (netRatioWinner2 == avgRatioWinner) & (netRatioWinner2 == avgWinner)) %>%
inner_join(moneyLineOdds, by="game_id") %>%
group_by(game_id) %>%
mutate(
odds_selected = if_else(netRatioWinner2 == home_team, home_moneyline, away_moneyline),
win = if_else(netRatioWinner2 == actualWinner, TRUE, FALSE)
)
df <- apply(agreedGames, 1, totalReturnCalc)
sumdf <- sum(df)
avgCoeff <- data.frame(c(baseline_predictor_df$homeAvg, baseline_predictor_df$awayAvg), c(baseline_predictor_df$home_score, baseline_predictor_df$away_score), c(baseline_predictor_df$homeavgRatio, baseline_predictor_df$awayAvgRatio), c(baseline_predictor_df$homeNetRatio, baseline_predictor_df$awayNetRatio), c(baseline_predictor_df$homeAvgRatio2, baseline_predictor_df$awayAvgRatio2), c(baseline_predictor_df$homeNetRatio2, baseline_predictor_df$awayNetRatio2), c(baseline_predictor_df$homeJuccula, baseline_predictor_df$awayJuccula)) %>%
rename(
avg = c.baseline_predictor_df.homeAvg..baseline_predictor_df.awayAvg.,
avgRatio = c.baseline_predictor_df.homeavgRatio..baseline_predictor_df.awayAvgRatio.,
avgRatio2 = c.baseline_predictor_df.homeAvgRatio2..baseline_predictor_df.awayAvgRatio2.,
netRatio = c.baseline_predictor_df.homeNetRatio..baseline_predictor_df.awayNetRatio.,
netRatio2 = c.baseline_predictor_df.homeNetRatio2..baseline_predictor_df.awayNetRatio2.,
juccula = c.baseline_predictor_df.homeJuccula..baseline_predictor_df.awayJuccula.,
actualScore = c.baseline_predictor_df.home_score..baseline_predictor_df.away_score.
)%>%
group_by(avg, avgRatio,avgRatio2,netRatio,netRatio2, juccula,actualScore) %>%
mutate(
meanFormula = (sum(avgRatio, avgRatio2, netRatio, juccula))/4
)
print(cor(avgCoeff$avg, avgCoeff$actualScore))
print(cor(avgCoeff$avgRatio, avgCoeff$actualScore))
print(cor(avgCoeff$avgRatio2, avgCoeff$actualScore))
print(cor(avgCoeff$netRatio, avgCoeff$actualScore))
print(cor(avgCoeff$netRatio2, avgCoeff$actualScore))
print(cor(avgCoeff$juccula, avgCoeff$actualScore))
print(cor(avgCoeff$meanFormula, avgCoeff$actualScore))
View(baseline_predictor_df)
current_week = 14
current_season_schedule <- fast_scraper_schedules(2022)
current_week_counter = 5
temp_team_schedule <- schedule_df %>%
filter(week < 5)
temp_league_schedule <- current_season_schedule %>%
filter(week == 5)
temp_team_df <- return_team_df(temp_team_schedule)
baseline_predictor_df <- return_predictor_df(temp_league_schedule, temp_team_df, avg_points)
while (current_week_counter < current_week) {
temp_team_schedule2 <- schedule_df %>%
filter(week < current_week_counter)
temp_league_schedule <- current_season_schedule %>%
filter(week == current_week_counter)
temp_team_df <- return_team_df(temp_team_schedule2)
baseline_predictor_df <- rbind(baseline_predictor_df, return_predictor_df(temp_league_schedule, temp_team_df, avg_points))
current_week_counter = current_week_counter + 1
}
baseline_predictor_df
source("D:/Users/jeffi/Documents/GitHub/fhmAnalyzer/SHLscraper.R", echo=TRUE)
View(point_divide)
source("D:/Users/jeffi/Documents/GitHub/fhmAnalyzer/SHLscraper.R", echo=TRUE)
View(point_divide_D)
source("D:/Users/jeffi/Documents/GitHub/fhmAnalyzer/SHLscraper.R", echo=TRUE)
source("D:/Users/jeffi/Documents/GitHub/fhmAnalyzer/SHLscraper.R", echo=TRUE)
View(point_divide_F)
source("D:/Users/jeffi/Documents/GitHub/fhmAnalyzer/SHLscraper.R", echo=TRUE)
View(point_divide_F)
source("D:/Users/jeffi/Documents/GitHub/fhmAnalyzer/SHLscraper.R", echo=TRUE)
getwd()
setwd("D:/Users/jeffi/Documents/GitHub/fhmAnalyzer")
source("D:/Users/jeffi/Documents/GitHub/fhmAnalyzer/SHLscraper.R", echo=TRUE)
